{"version":3,"sources":["components/Header.js","components/coinName.js","components/tableSetting.js","components/PostContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Component","coinNameKR","BTC","ETH","DASH","LTC","ETC","XRP","BCH","XMR","ZEC","QTUM","BTG","EOS","ICX","VET","TRX","ELF","MITH","MCO","OMG","KNC","GNT","ZIL","ETHOS","PAY","WAX","POWR","LRC","GTO","STEEM","STRAT","ZRX","REP","AE","XEM","SNT","ADA","PPT","CTXC","CMT","THETA","WTC","ITC","TRUE","ABT","RNT","PLY","WAVES","LINK","ENJ","PST","SALT","RDN","LOOM","PIVX","INS","BCD","BZNT","XLM","OCN","BSV","TMTG","BAT","WET","XVG","IOST","POLY","HC","ROM","AMO","ETZ","ARN","APIS","MTL","DACC","DAC","BHP","BTT","HDAC","NPXS","AUTO","GXC","ORBS","VALOR","CON","ANKR","MIX","HYC","LBA","QKC","LAMB","CRO","MXC","darkTheme","title","fontSize","fontColor","backgroundColor","contextMenu","header","rows","borderColor","hoverFontColor","hoverBackgroundColor","cells","cellPadding","columns","name","selector","sortable","ignoreRowClick","width","cell","row","key","target","rel","object","getKeyByValue","FluctateRate","FluctateRate24","premium","premiumGap","addComma","num","toString","replace","titleComponent","src","alt","PostContainer","state","status","data","error","info","console","log","axios","get","exchangeResponse","exchangeData","basePrice","this","getCoinData","interval","setInterval","clearInterval","cancelSetState","chartData","response","usdCoinData","Object","entries","value","premiumPrice","premiumPriceGap","DISPLAY","usdPrice","USD","PRICE","closing_price","toFixed","push","Price","setState","statue","id","customTheme","responsive","noDataComponent","fixedHeader","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2aeaef3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <a href=\"/\">Crypto Table</a>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","/*\n * Coin Name Setting JS\n *\n */\n\nconst coinNameKR = {\n  bithumb: {\n    BTC: '비트코인',\n    ETH: '이더리움',\n    DASH: '대시',\n    LTC: '라이트코인',\n    ETC: '이더리움 클래식',\n    XRP: '리플',\n    BCH: '비트코인 캐시',\n    XMR: '모네로',\n    ZEC: '제트캐시',\n    QTUM: '퀀텀',\n    BTG: '비트코인 골드',\n    EOS: '이오스',\n    ICX: '아이콘',\n    VET: '비체인',\n    TRX: '트론',\n    ELF: '엘프',\n    MITH: '미스릴',\n    MCO: '크립토닷컴',\n    OMG: '오미세고',\n    KNC: '카이버 네트워크',\n    GNT: '골렘',\n    ZIL: '질리카',\n    ETHOS: '에토스',\n    PAY: '텐엑스',\n    WAX: '왁스',\n    POWR: '파워렛져',\n    LRC: '루프링',\n    GTO: '기프토',\n    STEEM: '스팀',\n    STRAT: '스트라티스',\n    ZRX: '제로엑스',\n    REP: '어거',\n    AE: '애터니티',\n    XEM: '넴',\n    SNT: '스테이터스네트워크토큰',\n    ADA: '에이다',\n    PPT: '파퓰러스',\n    CTXC: '코르텍스',\n    CMT: '사이버마일즈',\n    THETA: '쎄타토큰',\n    WTC: '울턴체인',\n    ITC: '아이오티체인',\n    TRUE: '트루체인',\n    ABT: '아크블록',\n    RNT: '원루트 네트워크',\n    PLY: '플레이코인',\n    WAVES: '웨이브',\n    LINK: '체인링크',\n    ENJ: '엔진코인',\n    PST: '프리마스',\n    SALT: '솔트',\n    RDN: '레이든네트워크토큰',\n    LOOM: '룸네트워크',\n    PIVX: '피벡스',\n    INS: '아이앤에스',\n    BCD: '비트코인 다이아몬드',\n    BZNT: '베잔트',\n    XLM: '스텔라루멘',\n    OCN: '오디세이',\n    BSV: '비트코인에스브이',\n    TMTG: '더마이다스터치골드',\n    BAT: '베이직어텐션토큰',\n    WET: '위쇼토큰',\n    XVG: '버지',\n    IOST: '이오스트',\n    POLY: '폴리매스',\n    HC: '하이퍼캐시',\n    ROM: '롬',\n    AMO: '아모코인',\n    ETZ: '이더제로',\n    ARN: '에어론',\n    APIS: '아피스',\n    MTL: '메탈',\n    DACC: '디에이씨씨',\n    DAC: '다빈치',\n    BHP: '비에이치피',\n    BTT: '비트토렌트',\n    HDAC: '에이치닥',\n    NPXS: '펀디엑스',\n    AUTO: '큐브',\n    GXC: '지엑스체인',\n    ORBS: '오브스',\n    VALOR: '밸러토큰',\n    CON: '코넌',\n    ANKR: '앵커',\n    MIX: '믹스마블',\n    HYC: '하이콘',\n    LBA: '크레드',\n    QKC: '쿼크체인',\n    LAMB: '람다',\n    CRO: '크립토닷컴체인',\n    MXC: '머신익스체인지코인',\n  },\n};\n\nexport { coinNameKR };\n","import React from 'react';\nimport { coinNameKR } from './coinName';\nimport './PostContainer.css';\n\n/* Theme Setting */\nconst darkTheme = {\n  title: {\n    fontSize: '22px',\n    fontColor: '#FFFFFF',\n    backgroundColor: '#363640',\n  },\n  contextMenu: {\n    backgroundColor: '#E91E63',\n    fontColor: '#FFFFFF',\n  },\n  header: {\n    fontSize: '12px',\n    fontColor: '#FFFFFF',\n    backgroundColor: '#363640',\n  },\n  rows: {\n    fontColor: '#FFFFFF',\n    backgroundColor: '#363640',\n    borderColor: 'rgba(255, 255, 255, .12)',\n    hoverFontColor: 'black',\n    hoverBackgroundColor: 'rgba(0, 0, 0, .24)',\n  },\n  cells: {\n    cellPadding: '10px',\n  },\n};\n\n/* Columns Setting */\nconst columns = [\n  {\n    name: 'Coin Name',\n    selector: 'key',\n    sortable: true,\n    ignoreRowClick: true,\n    width: '20%',\n    cell: row => {\n      function getKeyByValue(object, row) {\n        // Data from coinName.js Object\n        return object[row]; // Returns Korean Coin Name\n      }\n      return (\n        <a\n          className=\"coinName\"\n          href={'https://www.bithumb.com/trade/order/' + row.key}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\">\n          {row.key}\n          <span className=\"sub\">\n            {getKeyByValue(coinNameKR.bithumb, row.key)}\n          </span>\n        </a>\n      );\n    },\n  },\n  {\n    name: 'Current Price',\n    selector: 'Price',\n    sortable: true,\n    ignoreRowClick: true,\n    width: '20%',\n  },\n  {\n    name: '24Hours Fluctate',\n    selector: 'FluctateRate',\n    sortable: true,\n    ignoreRowClick: true,\n    cell: row => {\n      if (row.FluctateRate < 0) {\n        return (\n          <div className=\"minus\">\n            {row.FluctateRate}% ({row.FluctateRate24}원)\n          </div>\n        );\n      } else if (row.FluctateRate >= 0) {\n        return (\n          <div className=\"plus\">\n            +{row.FluctateRate}% (+{row.FluctateRate24}원)\n          </div>\n        );\n      }\n    },\n  },\n  {\n    /* KRW-USD premium */\n    name: 'Ko.Premium',\n    selector: 'premium',\n    sortable: true,\n    cell: row => {\n      if (row.premium < 0) {\n        return (\n          <div className=\"minus\">\n            {row.premium}% ({row.premiumGap}원)\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"plus\">\n            +{row.premium}% (+{row.premiumGap}원)\n          </div>\n        );\n      }\n    },\n  },\n];\n\nexport { darkTheme, columns };\n","import React, { Component } from 'react';\nimport DataTable from 'react-data-table-component';\nimport axios from 'axios';\nimport { darkTheme, columns } from './tableSetting';\n\n/* Price Comma Function */\nfunction addComma(num) {\n  let regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\n  return num.toString().replace(regexp, ',');\n}\n\n/* Title Component */\nlet titleComponent = (\n  <div className=\"logoContainer\">\n    <a\n      href=\"https://www.bithumb.com/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\">\n      <img\n        src=\"https://github.com/sangumee/Crypto-Table/blob/master/public/images/bithumb.png?raw=true\"\n        alt=\"bithumb LOGO\"\n        className=\"logo\"\n      />\n    </a>\n  </div>\n);\n\n/* Main Component */\nclass PostContainer extends Component {\n  state = {\n    title: <div className=\"Load\">Load data from API Server...</div>,\n    status: <div className=\"initLoading\">LOADING WAIT!!</div>,\n    data: [],\n  };\n\n  /* Error Catch */\n  componentDidCatch(error, info) {\n    console.log(error, info);\n  }\n\n  /* ComponentDidMount Cycle */\n  async componentDidMount() {\n    /* Exchange Rate USD to KRW */\n    const exchangeResponse = await axios.get(\n      `https://quotation-api-cdn.dunamu.com/v1/forex/recent?codes=FRX.KRWUSD`\n    );\n    const exchangeData = exchangeResponse.data[0].basePrice;\n    this.getCoinData(exchangeData); // Initial get coin Data\n    this.interval = setInterval(() => {\n      this.getCoinData(exchangeData);\n    }, 5000); // Interval 5 Seconds\n  }\n\n  /* componentWillUnmount Cycle */\n  componentWillUnmount() {\n    clearInterval(this.interval); // Prevent memory leaks\n    this.cancelSetState = true;\n  }\n\n  async getCoinData(exchangeData) {\n    let chartData = []; //  Initial chart array\n    const response = await axios.get(\n      `https://api.bithumb.com/public/ticker/all`\n    );\n    const usdCoinData = await axios.get(\n      `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=BTC,ETH,DASH,LTC,ETC,XRP,BCH,XMR,ZEC,QTUM,BTG,EOS,ICX,VET,TRX,ELF,MITH,MCO,OMG,KNC,GNT,ZIL,ETHOS,PAY,WAX,POWR,LRC,GTO,STEEM,STRAT,ZRX,REP,AE,XEM,SNT,ADA,PPT,CTXC,CMT,THETA,WTC,ITC,TRUE,ABT,RNT,PLY,WAVES,LINK,ENJ,PST,SALT,RDN,LOOM,PIVX,INS,BCD,BZNT,XLM,OCN,BSV,TMTG,BAT,WET,XVG,IOST,POLY,HC,ROM,AMO,ETZ,ARN,APIS,MTL,DACC,DAC,BHP,BTT,HDAC,NPXS,AUTO,GXC,ORBS,VALOR,CON,ANKR,MIX&tsyms=USD`\n    );\n\n    if (this.cancelSetState) {\n      return;\n    }\n\n    /* If API Status Success */\n    if (response.data.status === '0000') {\n      delete response.data.data['date']; // Remove 'date' data from object\n\n      /* Create table data */\n      for (let [key, value] of Object.entries(response.data.data)) {\n        let premiumPrice, premiumPriceGap;\n        if (typeof usdCoinData.data.DISPLAY[key] === 'undefined') {\n          // If Coin data not exists set '-'\n          premiumPrice = premiumPriceGap = '-';\n        } else {\n          /* Calculate USD * KRW data */\n          let usdPrice =\n            usdCoinData.data.DISPLAY[key].USD.PRICE.replace('$ ', '').replace(\n              ',',\n              ''\n            ) * exchangeData;\n          premiumPrice = (\n            ((value.closing_price - usdPrice) / usdPrice) *\n            100\n          ).toFixed(2);\n          premiumPriceGap = (value.closing_price - usdPrice).toFixed(2);\n        }\n        /* Create Final Data */\n        chartData.push({\n          key: key,\n          Price: `${addComma(value.closing_price)}원`,\n          FluctateRate: `${value['fluctate_rate_24H']}`,\n          FluctateRate24: `${value['fluctate_24H']}`,\n          premium: addComma(premiumPrice),\n          premiumGap: addComma(premiumPriceGap),\n        });\n      }\n      /* If Server Status Success */\n      this.setState({\n        statue: 'success',\n        data: chartData,\n        title: (\n          <div>\n            {titleComponent}\n            <div id=\"statusSuccess\" />\n            <p className=\"apiSuccess\"> API Works Fine</p>\n          </div>\n        ),\n      });\n    } else {\n      /* If Server Status Fails */\n      this.setState({\n        statue: 'fail',\n        title: (\n          <div>\n            {titleComponent}\n            <div id=\"statusFail\" />\n            <p className=\"apiFail\"> API is not wokring. Something is Wrong</p>\n          </div>\n        ),\n      });\n    }\n  }\n\n  render() {\n    const { data, title } = this.state;\n    // console.log(data);\n    return (\n      <DataTable\n        title={title}\n        className=\"Post\"\n        columns={columns}\n        data={data}\n        customTheme={darkTheme}\n        responsive={true}\n        noDataComponent={this.state.status}\n        fixedHeader\n      />\n    );\n  }\n}\n\nexport default PostContainer;\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport PostContainer from './components/PostContainer';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <PostContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}